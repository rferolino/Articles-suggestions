This application is the sandbox for content suggestion engine (CSE). It uses angular.js, node.js, and grunt.
The is a mock service which is defined in route.js which the middleware.js uses to load to express.js. You need
to run "npm install" first to download all the dependencies as specified in package.json.

Gruntfile.js contains that definition of tasks for grunt.
   * Grunt   - default task which does a lot of things like compiling the coffeescript and less and create a
               ".temp", "dist", and "dist_test" directories.

   * grunt dev - almost same as default and adds the file watcher

   * grunt server - loads the server and livereload

   * grunt prod - minifies the files and gets it ready for production release.


To run:

1. Make sure that nginx is running as this is needed for CORS. See here for direction to
  configure nginx:
     > https://wiki.apollogrp.edu/display/forward/How+to+configure+NGINX+to+solve+CORS+or+Access-Control-Allow-Origin+issue

2. Logon to https://ecampus.qaols.phoenix.edu. This is needed to establish the assertion cookies.

3. Go to the root of this application and run "grunt server". The browser will be open automatically and the application
   is assigned to port 9000. If you want the port to be picked by grunt for you, change the port to "0" in gruntfile.js.
   However we specified in nginx.conf that this port is 9000.

   Switch over the the https version if you see "localhost:9000"...Go to https://localhost.qaols.phoenix.edu in your browser.

   You can use the following script to test the CORS by sending instrumentation data to Hadoop. Add to index.template page.

   <script>
       var url = "https://localhost.qaols.phoenix.edu/Instrumentation/1/urn:apol:tenantId:831D8B107020BBEBE0400F0A32207789/";
       var json, jPayload = {};

       jPayload.applicationId = 'StudentTest';
       jPayload.command = 'edu.apollogrp.ecampus.student.program.schedule.grades';
       jPayload.eventType = 'user';
       jPayload.level = 'INFO';
       jPayload.sourceId = 'test';
       jPayload.timestamp = new Date();
       jPayload.sessionId = 'A360BB76B8D311453D1346332707725685526';
       jPayload.tenantId = '831D8B107020BBEBE0400F0A32207789';
       jPayload.profileId = 'f54f5568-9493-4ab0-8243-47ccd153b54d';
       jPayload.parameters = {"programId":"785996","program":"MBA/HCM-002 (Primary)","userAction":"Switch Page","launchPage":"https://localhost.qaols.phoenix.edu/#","landingPage":"https://localhost.qaols.phoenix.edu/#"}

       json = '[' + JSON.stringify(jPayload) + ']';
       console.log(json);

       var ajaxObj = {
           url: url,
           contentType: "application/json; charset=utf-8",
           data: json,
           type: "post",
           success: function (result) {
               console.log("Successfully posted instrumentation data");
               console.log(result);
           },
           error: function (xhr, ajaxOptions, errorThrown) {
               console.log("Failed post to hadoop... ");
               console.log(xhr.responseText);
               console.log(xhr.status);
               console.log(xhr.statusText);
               console.log(xhr);
           }
       };

       $.ajax(ajaxObj);

   </script>

  A successful request would yield:

      Successfully posted instrumentation data
      {"serverTime":1376698721536}


  *** if you wish to use the mock service again  ***
  - Go back to localhost:9000
  - Change to "'CSE_CONFIG', {apiBaseUrl: '/api/v1/suggestions'}" in cseWidget.js
